name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 02:00 UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  script-analysis:
    name: Shell Script Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Run ShellCheck on install script
      run: |
        shellcheck install.sh
        shellcheck sync-from-private.sh

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Run npm audit (if package.json exists)
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate
        else
          echo "No package.json found, skipping npm audit"
        fi

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install detect-secrets
      run: |
        pip install detect-secrets
        
    - name: Run secrets detection
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline
        
    - name: Verify secrets baseline
      run: |
        if [ -f ".secrets.baseline" ]; then
          detect-secrets audit .secrets.baseline
        fi

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security policy exists
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "‚ùå SECURITY.md file is missing"
          exit 1
        fi
        echo "‚úÖ Security policy found"
        
    - name: Validate security policy content
      run: |
        required_sections=("Security Overview" "Reporting Security Vulnerabilities" "Supported Versions")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" SECURITY.md; then
            echo "‚ùå Missing required section: $section"
            exit 1
          fi
        done
        echo "‚úÖ Security policy contains required sections"

  installation-security-test:
    name: Installation Security Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test installer script permissions
      run: |
        chmod +x install.sh
        # Test that script requires proper permissions
        if ./install.sh --dry-run 2>&1 | grep -q "requires.*permission"; then
          echo "‚úÖ Installer properly checks permissions"
        else
          echo "‚ö†Ô∏è  Installer may not properly validate permissions"
        fi
        
    - name: Test installation with minimal privileges
      run: |
        # Create test environment with limited privileges
        ./install.sh --dry-run --verbose 2>&1 | tee install-test.log
        
        # Check for security best practices
        if grep -q "https://" install-test.log; then
          echo "‚úÖ Uses HTTPS for downloads"
        else
          echo "‚ùå May not use HTTPS for all downloads"
          exit 1
        fi

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check license file
      run: |
        if [ ! -f "LICENSE" ]; then
          echo "‚ùå LICENSE file is missing"
          exit 1
        fi
        echo "‚úÖ License file found"
        
    - name: Validate README security information
      run: |
        if ! grep -q -i "security" README.md; then
          echo "‚ùå README.md should contain security information"
          exit 1
        fi
        echo "‚úÖ README contains security information"
        
    - name: Check for security badges
      run: |
        if grep -q "security.*badge" README.md; then
          echo "‚úÖ Security badge found in README"
        else
          echo "‚ö†Ô∏è  Consider adding security badge to README"
        fi

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [security-scan, script-analysis, dependency-check, secrets-scan]
    if: failure()
    
    steps:
    - name: Send security alert
      run: |
        echo "üö® Security check failed in repository: ${{ github.repository }}"
        echo "Check the workflow results for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # In a real environment, this would send notifications to security team